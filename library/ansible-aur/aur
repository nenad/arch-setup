#!/usr/bin/python

# The MIT License (MIT)
#
# Copyright (c) 2014 Austin Hyde
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import os
import pwd
import platform


def yay_in_path(module):
    """
    Determine if yay is available.
    """
    rc, stdout, stderr = module.run_command('which yay', check_rc=False)
    return rc == 0


def pacman_in_path(module):
    """
    Determine if pacman is available.
    """
    rc, stdout, stderr = module.run_command('which pacman', check_rc=False)
    return rc == 0


def package_installed(module, pkg):
    """
    Determine if a package is already installed.
    """
    rc, stdout, stderr = module.run_command('pacman -Q %s' % pkg, check_rc=False)
    return rc == 0


def check_packages(module, pkgs):
    """
    Inform the user what would change if the module were run.
    """
    would_be_changed = []

    for pkg in pkgs:
        installed = package_installed(module, pkg)
        if not installed:
            would_be_changed.append(pkg)

    if would_be_changed:
        module.exit_json(changed=True, msg='%s package(s) would be installed' % (len(would_be_changed)))
    else:
        module.exit_json(changed=False, msg='all packages are already installed')


def install_packages(module, pkgs, dir, user, virtual):
    """
    Install the specified packages via yay.
    """
    num_installed = 0

    if module.params['skip_pgp']:
        cmd += ' --skippgpcheck'
    for pkg in pkgs:
        # If the package is already installed, skip the install.
        if package_installed(module, pkg):
            continue

        # If the package was succesfully built, install it.
        rc, stdout, stderr = module.run_command('sudo -u %s yay --noconfirm -S %s' % (user, pkg), check_rc=False, use_unsafe_shell=True)
        if rc != 0:
            module.fail_json(msg='failed to install package %s, because: %s %s' % (pkg,stderr,stdout))
        else:
            num_installed += 1

    # Exit with the number of packages succesfully installed.
    if num_installed > 0:
        module.exit_json(changed=True, msg='installed %s package(s)' % num_installed)
    else:
        module.exit_json(changed=False, msg='all packages were already installed')

def main():
    module = AnsibleModule(
        argument_spec = dict(
            name = dict(required=True, type='list'),
            user = dict(required=True),
            dir  = dict(),
            skip_pgp = dict(default=False, type='bool'),
            virtual = dict(),
        ),
        supports_check_mode = True
    )

    # Fail of pacman is not available.
    if not pacman_in_path(module):
        module.fail_json(msg="could not locate pacman executable")

    if not yay_in_path(module):
        module.fail_json(msg="could not locate yay executable")

    p = module.params

    # Get all the requested package names.
    pkgs = p['name'] #.split(',')

    print("Packages: %s" % pkgs)

    # Fail if the specified user does not exist.
    try:
        pwd.getpwnam(p['user'])
    except KeyError:
        module.fail_json(msg="user %s does not exist" % p['user'])
    else:
        user = p['user']

    if module.check_mode:
        check_packages(module, pkgs)

    install_packages(module, pkgs, dir, user, False)


from ansible.module_utils.basic import *
main()
